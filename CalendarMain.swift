//
//  CalendarMain.swift
//  SwiftCalendar
//
//  Created by wuge on 2016/02/04.
//  Copyright © 2016年 Yubun. All rights reserved.
//
//* This code includes "sun_position.m" by Khalil Sultan
//* http://www.mathworks.com/matlabcentral/fileexchange/5430-sun-azimuth-data
//* Copyright 08 Jul 2004 Khalil Sultan (Updated 09 Jul 2004 MATLAB Central )
//* Released under the BSD Licenses.
//* MATLAB release	MATLAB 6.5 (R13)
//*
//* This code includes "moonpos.pro" by by Jean Meeus (1998)
//* http://www.rdocumentation.org/packages/astrolibR/functions/moonpos
//* The method is derived from the Chapront ELP2000/82 Lunar Theory (Chapront-Touze and Chapront, 1983)
//* Written W. Landsman R adaptation by Arnab Chakraborty June 2013
//* Released under the GPL Licenses.

import Foundation
class CalendarMain{
    let nutationTerms:[Double] = [0,0,0,0,1,-171996,-174.2,92025,8.9,0,0,2,-2,2,-13187,-1.6,5736,-3.1,0,0,2,0,2,-2274,-0.2,977,-0.5,0,0,0,0,2,2062,0.2,-895,0.5,0,-1,0,0,0,-1426,3.4,54,-0.1,1,0,0,0,0,712,0.1,-7,0,0,1,2,-2,2,-517,1.2,224,-0.6,0,0,2,0,1,-386,-0.4,200,0,1,0,2,0,2,-301,0,129,-0.1,0,-1,2,-2,2,217,-0.5,-95,0.3,-1,0,0,2,0,158,0,-1,0,0,0,2,-2,1,129,0.1,-70,0,-1,0,2,0,2,123,0,-53,0,1,0,0,0,1,63,0.1,-33,0,0,0,0,2,0,63,0,-2,0,-1,0,2,2,2,-59,0,26,0,-1,0,0,0,1,-58,-0.1,32,0,1,0,2,0,1,-51,0,27,0,-2,0,0,2,0,-48,0,1,0,-2,0,2,0,1,46,0,-24,0,0,0,2,2,2,-38,0,16,0,2,0,2,0,2,-31,0,13,0,2,0,0,0,0,29,0,-1,0,1,0,2,-2,2,29,0,-12,0,0,0,2,0,0,26,0,-1,0,0,0,2,-2,0,-22,0,0,0,-1,0,2,0,1,21,0,-10,0,0,2,0,0,0,17,-0.1,0,0,0,2,2,-2,2,-16,0.1,7,0,-1,0,0,2,1,16,0,-8,0,0,1,0,0,1,-15,0,9,0,1,0,0,-2,1,-13,0,7,0,0,-1,0,0,1,-12,0,6,0,2,0,-2,0,0,11,0,0,0,-1,0,2,2,1,-10,0,5,0,1,0,2,2,2,-8,0,3,0,0,-1,2,0,2,-7,0,3,0,0,0,2,2,1,-7,0,3,0,1,1,0,-2,0,-7,0,0,0,0,1,2,0,2,7,0,-3,0,-2,0,0,2,1,-6,0,3,0,0,0,0,2,1,-6,0,3,0,2,0,2,-2,2,6,0,-3,0,1,0,0,2,0,6,0,0,0,1,0,2,-2,1,6,0,-3,0,0,0,0,-2,1,-5,0,3,0,0,-1,2,-2,1,-5,0,3,0,2,0,2,0,1,-5,0,3,0,1,-1,0,0,0,5,0,0,0,1,0,0,-1,0,-4,0,0,0,0,0,0,1,0,-4,0,0,0,0,1,0,-2,0,-4,0,0,0,1,0,-2,0,0,4,0,0,0,2,0,0,-2,1,4,0,-2,0,0,1,2,-2,1,4,0,-2,0,1,1,0,0,0,-3,0,0,0,1,-1,0,-1,0,-3,0,0,0,-1,-1,2,2,2,-3,0,1,0,0,-1,2,2,2,-3,0,1,0,1,-1,2,0,2,-3,0,1,0,3,0,2,0,2,-3,0,1,0,-2,0,2,0,2,-3,0,1,0,1,0,2,0,0,3,0,0,0,-1,0,2,4,2,-2,0,1,0,1,0,0,0,2,-2,0,1,0,-1,0,2,-2,1,-2,0,1,0,0,-2,2,-2,1,-2,0,1,0,-2,0,0,0,1,-2,0,1,0,2,0,0,0,1,2,0,-1,0,3,0,0,0,0,2,0,0,0,1,1,2,0,2,2,0,-1,0,0,0,2,1,2,2,0,-1,0,1,0,0,2,1,-1,0,0,0,1,0,2,2,1,-1,0,1,0,1,1,0,-2,1,-1,0,0,0,0,1,0,2,0,-1,0,0,0,0,1,2,-2,0,-1,0,0,0,0,1,-2,2,0,-1,0,0,0,1,0,-2,2,0,-1,0,0,0,1,0,-2,-2,0,-1,0,0,0,1,0,2,-2,0,-1,0,0,0,1,0,0,-4,0,-1,0,0,0,2,0,0,-4,0,-1,0,0,0,0,0,2,4,2,-1,0,0,0,0,0,2,-1,2,-1,0,0,0,-2,0,2,4,2,-1,0,1,0,2,0,2,2,2,-1,0,0,0,0,-1,2,0,1,-1,0,0,0,0,0,-2,0,1,-1,0,0,0,0,0,4,-2,2,1,0,0,0,0,1,0,0,2,1,0,0,0,1,1,2,-2,2,1,0,-1,0,3,0,2,-2,2,1,0,0,0,-2,0,2,2,2,1,0,-1,0,-1,0,0,0,2,1,0,-1,0,0,0,-2,2,1,1,0,0,0,0,1,2,0,1,1,0,0,0,-1,0,4,0,2,1,0,0,0,2,1,0,-2,0,1,0,0,0,2,0,0,2,0,1,0,0,0,2,0,2,-2,1,1,0,-1,0,2,0,-2,0,1,1,0,0,0,1,-1,0,-2,0,1,0,0,0,-1,0,0,1,1,1,0,0,0,-1,-1,0,2,1,1,0,0,0,0,1,0,1,0,1,0,0,0]
    let sunAzimuth:[[Double]] = [
        [175347046.0,0.0,0.0, 3341656.0,4.6692568,6283.075849991, 34894.0,4.62610242,12566.151699983, 3497.0,2.74411801,5753.384884897, 3418.0,2.8288658,3.52311835, 3136.0,3.62767042,77713.77146812101, 2676.0,4.41808351,7860.419392439, 2343.0,6.13516238,3930.20969622, 1324.0,0.742463564,11506.769769794, 1273.0,2.03709656,529.690965095, 1199.0,1.10962944,1577.343542448, 990.0,5.2326813,5884.926846583, 902.0,2.04505443,26.2983198, 857.0,3.50849157,398.149003408, 780.0,1.17882652,5223.693919802, 753.0,2.53339054,5507.553238667, 505.0,4.58292563,18849.227549974, 492.0,4.2050664,775.522611324, 357.0,2.91954117,0.067310303, 317.0,5.84901952,11790.629088659, 284.0,1.89869034,796.298006816, 271.0,0.314886076,10977.078804699, 243.0,0.344811409,5486.777843175, 206.0,4.80646606,2544.314419883, 205.0,1.86947814,5573.142801433, 202.0,2.45767795,6069.776754553, 156.0,0.833060738,213.299095438, 132.0,3.41118276,2942.463423292, 126.0,1.0830263,20.775395492, 115.0,0.645449117,0.980321068, 103.0,0.635998467,4694.002954708, 102.0,0.975692218,15720.838784878, 102.0,4.26679821,7.113547, 99.0,6.2099294,2146.165416475, 98.0,0.681012723,155.420399434, 86.0,5.98322631,161000.685737674, 85.0,1.29870743,6275.962302991, 85.0,3.67080093,71430.695618129, 80.0,1.80791331,17260.15465469, 79.0,3.03698313,12036.460734888, 75.0,1.75508916,5088.628839767, 74.0,3.50319443,3154.687084896, 74.0,4.67926566,801.820931124, 70.0,0.83297597,9437.762934887, 62.0,3.97763881,8827.390269875, 61.0,1.81839811,7084.896781115, 57.0,2.78430398,6286.59896834, 56.0,4.38694881,14143.495242431, 56.0,3.47006009,6279.552731642, 52.0,0.189149458,12139.553509107, 52.0,1.33282747,1748.016413067, 51.0,0.283068645,5856.477659115, 49.0,0.48735065,1194.447010225, 41.0,5.36817351,8429.241266467, 41.0,2.39850882,19651.048481098, 39.0,6.16832995,10447.387839604, 37.0,6.04133859,10213.285546211, 37.0,2.56955239,1059.381930189, 36.0,1.70876112,2352.866153772, 36.0,1.77597315,6812.766815086, 33.0,0.593094995,17789.845619785, 30.0,0.442944641,83996.847318112, 30.0,2.73975124,1349.867409659, 25.0,3.16470953,4690.479836359],
        [628331966747.0,0.0,0.0, 206059.0,2.67823456,6283.075849991, 4303.0,2.6351265,12566.151699983, 425.0,1.59046981,3.52311835, 119.0,5.79557488,26.2983198, 109.0,2.96618002,1577.343542448, 93.0,2.59212835,18849.227549974, 72.0,1.13846158,529.690965095, 68.0,1.87472305,398.149003408, 67.0,4.40918235,5507.553238667, 59.0,2.88797039,5223.693919802, 56.0,2.1747168,155.420399434, 45.0,0.398030798,796.298006816, 36.0,0.466247398,775.522611324, 29.0,2.64707384,7.113547, 21.0,5.34138275,0.980321068, 19.0,1.84628333,5486.777843175, 19.0,4.96855125,213.299095438, 17.0,2.99116865,6275.962302991, 16.0,0.03216483,2544.314419883, 16.0,1.43049285,2146.165416475, 15.0,1.20532366,10977.078804699, 12.0,2.83432285,1748.016413067, 12.0,3.25804816,5088.628839767, 12.0,5.27379791,1194.447010225, 12.0,2.07502418,4694.002954708, 11.0,0.766141992,553.569402842, 10.0,1.30262991,6286.59896834, 10.0,4.23925472,1349.867409659, 9.0,2.69957063,242.728603974, 9.0,5.64475868,951.718406251, 8.0,5.30062665,2352.866153772, 6.0,2.65033985,9437.762934887, 6.0,4.66632584,4690.479836359],
        [52919.0,0.0,0.0, 8720.0,1.07209665,6283.075849991, 309.0,0.867288188,12566.151699983, 27.0,0.052978717,3.52311835, 16.0,5.18826691,26.2983198, 16.0,3.68457889,155.420399434, 10.0,0.757422977,18849.227549974, 9.0,2.05705419,77713.77146812101, 7.0,0.826733054,775.522611324, 5.0,4.66284525,1577.343542448, 4.0,1.03057163,7.113547, 4.0,3.44050804,5573.142801433, 3.0,5.14074633,796.298006816, 3.0,6.05291851,5507.553238667, 3.0,1.19246506,242.728603974, 3.0,6.11652627,529.690965095, 3.0,0.30637881,398.149003408, 3.0,2.27992811,553.569402842, 2.0,4.38118838,5223.693919802, 2.0,3.75435331,0.980321068],
        [289.0,5.84384199,6283.075849991, 35.0,0.0,0.0, 17.0,5.48766912,12566.151699983, 3.0,5.19577265,155.420399434, 1.0,4.72200252,3.52311835, 1.0,5.30045809,18849.227549974, 1.0,5.96925937,242.728603974],
        [114.0,3.14159265,0.0, 8.0,4.13446589,6283.075849991, 1.0,3.83803776,12566.151699983],
        [1.0,3.14159265,0.0]
    ]
    let latitudeTerms:[[Double]]=[
        [280.0 , 3.19870156, 84334.661581308, 102.0,5.42248619 , 5507.553238667, 80.0 ,3.88013204 , 5223.693919802 , 44.0 ,3.7044469 , 2352.866153772 , 32.0 ,4.0002637,1577.343542448],
        [9.0,3.89729062,5507.553238667, 6.0,1.7303885,5223.693919802]
        ]

    let radiusVector:[[Double]]=[
        [100013989.0,0.0,0.0, 1670700.0,3.09846351,6283.075849991, 13956.0,3.0552461,12566.151699983, 3084.0,5.19846674,77713.77146812101, 1628.0,1.17387749,5753.384884897, 1576.0,2.84685246,7860.419392439, 925.0,5.45292234,11506.769769794, 542.0,4.5640915,3930.20969622, 472.0,3.66100022,5884.926846583, 346.0,0.963686177,5507.553238667, 329.0,5.89983646,5223.693919802, 307.0,0.298671395,5573.142801433, 243.0,4.27349536,11790.629088659, 212.0,5.8471454,1577.343542448, 186.0,5.02194447,10977.078804699, 175.0,3.01193636,18849.227549974, 110.0,5.05510636,5486.777843175, 98.0,0.886813113,6069.776754553, 86.0,5.68959778,15720.838784878, 86.0,1.27083733,161000.685737674, 65.0,0.272506138,17260.15465469, 63.0,0.921771088,529.690965095, 57.0,2.01374292,83996.847318112, 56.0,5.24159799,71430.695618129, 49.0,3.2450124,2544.314419883, 47.0,2.5780507,775.522611324, 45.0,5.53715807,9437.762934887, 43.0,6.01110242,6275.962302991, 39.0,5.36071738,4694.002954708, 38.0,2.39255344,8827.390269875, 37.0,0.829529223,19651.048481098, 37.0,4.90107592,12139.553509107, 36.0,1.67468059,12036.460734888, 35.0,1.84270693,2942.463423292, 33.0,0.243703001,7084.896781115, 32.0,0.183682298,5088.628839767, 32.0,1.77775642,398.149003408, 28.0,1.21344868,6286.59896834, 28.0,1.89934331,6279.552731642, 26.0,4.5889685,10447.387839604],
        [103019.0,1.1074897,6283.075849991, 1721.0,1.06442301,12566.151699983, 702.0,3.14159265,0.0, 32.0,1.02169059,18849.227549974, 31.0,2.84353805,5507.553238667, 25.0,1.3190671,5223.693919802, 18.0,1.42429749,1577.343542448, 10.0,5.91378195,10977.078804699, 9.0,1.42046854,6275.962302991, 9.0,0.271461506,5486.777843175],
        [4359.0,5.78455134,6283.075849991, 124.0,5.57934722,12566.151699983, 12.0,3.14159265,0.0, 9.0,3.62777733,77713.771468121, 6.0,1.86958905,5573.142801433, 3.0,5.47027913,18849.227549974],
        [145.0,4.27319435,6283.075849991, 7.0,3.91697609,12566.151699983],
        [4.0,2.56384387,6283.075849991]
    ]
    let dLng:[Int]=[0,2,2,0,0,0,2,2,2,2,0,1,0,2,0,0,4,0,4,2,2,1,1,2,2,4,2,0,2,2,1,2,0,0,2,2,2,4,0,3,2,4,0,2,2,2,4,0,4,1,2,0,1,3,4,2,0,1,2,2]
    let mLng:[Int]=[0,0,0,0,1,0,0,-1,0,-1,1,0,1,0,0,0,0,0,0,1,1,0,1,-1,0,0,0,1,0,-1,0,-2,1,2,-2,0,0,-1,0,0,1,-1,2,2,1,-1,0,0,-1,0,1,0,1,0,0,-1,2,1,0,0]
    let mpLng:[Int]=[1,-1,0,2,0,0,-2,-1,1,0,-1,0,1,0,1,1,-1,3,-2,-1,0,-1,0,1,2,0,-3,-2,-1,-2,1,0,2,0,-1,1,0,-1,2,-1,1,-2,-1,-1,-2,0,1,4,0,-2,0,2,1,-2,-3,2,1,-1,3,-1]
    let fLng:[Int]=[0,0,0,0,0,2,0,0,0,0,0,0,0,-2,2,-2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,-2,2,0,2,0,0,0,0,0,0,-2,0,0,0,0,-2,-2,0,0,0,0,0,0,0,-2]
    let sinLng:[Int]=[6288774,1274027,658314,213618,-185116,-114332,58793,57066,53322,45758,-40923,-34720,-30383,15327,-12528,10980,10675,10034,8548,-7888,-6766,-5163,4987,4036,3994,3861,3665,-2689,-2602,2390,-2348,2236,-2120,-2069,2048,-1773,-1595,1215,-1110,-892,-810,759,-713,-700,691,596,549,537,520,-487,-399,-381,351,-340,330,327,-323,299,294,0]
    let cosLng:[Int]=[-20905355,-3699111,-2955968,-569925,48888,-3149,246158,-152138,-170733,-204586,-129620,108743,104755,10321,0,79661,-34782,-23210,-21636,24208,30824,-8379,-16675,-12831,-10445,-11650,14403,-7003,0,10056,6322,-9884,5751,0,-4950,4130,0,-3958,0,3258,2616,-1897,-2117,2354,0,0,-1423,-1117,-1571,-1739,0,-4421,0,0,0,0,1165,0,0,8752]
    let dLat:[Int]=[0,0,0,2,2,2,2,0,2,0,2,2,2,2,2,2,2,0,4,0,0,0,1,0,0,0,1,0,4,4,0,4,2,2,2,2,0,2,2,2,2,4,2,2,0,2,1,1,0,2,1,2,0,4,4,1,4,1,4,2]
    let mLat:[Int]=[0,0,0,0,0,0,0,0,0,0,-1,0,0,1,-1,-1,-1,1,0,1,0,1,0,1,1,1,0,0,0,0,0,0,0,0,-1,0,0,0,0,1,1,0,-1,-2,0,1,1,1,1,1,0,-1,1,0,-1,0,0,0,-1,-2]
    let mpLat:[Int]=[0,1,1,0,-1,-1,0,2,1,2,0,-2,1,0,-1,0,-1,-1,-1,0,0,-1,0,1,1,0,0,3,0,-1,1,-2,0,2,1,-2,3,2,-3,-1,0,0,1,0,1,1,0,0,-2,-1,1,-2,2,-2,-1,1,1,-1,0,0]
    let fLat:[Int]=[1,1,-1,-1,1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,-1,-1,-1,1,3,1,1,1,-1,-1,-1,1,-1,1,-3,1,-3,-1,-1,1,-1,1,-1,1,1,1,1,-1,3,-1,-1,1,-1,-1,1,-1,1,-1,-1,-1,-1,-1,-1,1]
    let sinLat:[Int]=[5128122,280602,277693,173237,55413,46271,32573,17198,9266,8822,8216,4324,4200,-3359,2463,2211,2065,-1870,1828,-1794,-1749,-1565,-1491,-1475,-1410,-1344,-1335,1107,1021,833,777,671,607,596,491,-451,439,422,421,-366,-351,331,315,302,-283,-229,223,223,-220,-220,-185,181,-177,176,166,-164,132,-119,115,107]
    let daysPerMonth=29.530581724560566;
    let lunarDay=(29.530581724560566/28.530581724560566)
    let julianDaysOfJan6th2k=2451550.2600930116606;
    let doublePi=2*M_PI
    let lunarMonth=(360/29.530581724560566)

    let inverseRadian=M_PI/180;
    var _eu=[1.018214,1.017776,1.015212,1.010587,1.004352,0.996818,0.988663,0.980255,0.972433,0.965387,0.960003,0.956138,0.954598,0.954865,0.957506,0.961814,0.968021,0.975241,0.983452,0.991707,0.999793,1.006813,1.012515,1.016349]

    let aThird=1/3

    func dayDifferFrom1987(yr:Int) -> Double{
        var _dataArray=[
            124,119,115,110,106,102,98,95,91,88,
            85,82,79,77,74,72,70,67,65,63,
            62,60,58,57,55,54,53,51,50,49,
            48,47,46,45,44,43,42,41,40,38,
            37,36,35,34,33,32,31,30,28,27,
            26,25,24,23,22,21,20,19,18,17,
            16,15,14,14,13,12,12,11,11,10,
            10,10,9,9,9,9,9,9,9,9,
            9,9,9,9,9,9,9,9,10,10,
            10,10,10,10,10,10,10,11,11,11,
            11,11,11,11,11,11,11,11,11,11,
            11,11,11,11,12,12,12,12,12,12,
            12,12,12,12,13,13,13,13,13,13,
            13,14,14,14,14,14,14,14,15,15,
            15,15,15,15,15,16,16,16,16,16,
            16,16,16,16,16,17,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,16,16,16,16,15,15,14,14,
            14,13,13,13,13,13,13,13,13,13,
            13,13,13,13,13,13,13,12,12,12,
            12,12,11,11,11,10,10,9,9,8,
            8,7,7,6,6,6,6,6,6,6,
            6,6,6,6,6,6,7,7,7,7,
            7,7,7,7,8,8,8,8,8,8,
            8,8,8,7,6,6,5,4,3,2,
            2,0,-1,-1,-3,-3,-4,-5,-5,-5,
            -5,-5,-5,-5,-5,-6,-6,-6,-6,-6,
            -6,-6,-6,-7,-6,-6,-6,-6,-5,-4,
            -3,-2,0,1,3,4,5,6,8,9,
            10,12,13,15,16,17,18,19,20,21,
            21,22,22,23,23,24,24,24,24,24,
            24,24,24,24,24,24,24,24,24,24,
            24,25,25,26,26,27,27,28,28,29,
            29,30,30,30,31,31,31,32,32,33,
            33,34,34,34,35,36,37,37,38,39,
            40,41,42,43,44,45,46,48,49,50,
            51,51,52,53,54,54,55,55,56,56,
            57,58,58,59,60,61,62,62,63,63,
            64,64,64,65,66,66,67,68,68,69,
            70,70,71,72,73
        ]
        var _y1:Double = 0.0
        var _y2:Double = 0.0
        if  yr >= 2015 {
            _y1 = Double((yr-1810)/100)
            _y2 = -30.35 + _y1 * (-8.73367+_y1 * 29.029);
            return (_y2 / 86400)
        } else if yr >= 1620 {
            return Double(_dataArray[yr-1620]/86400)
        } else if yr > 948 {
            _y1=Double((yr - 1850)/100)
            _y2=(22.5 * _y1 * _y1)
            return(_y2 / 86400)
        } else {
            _y1=Double((yr-948)/100)
            _y2=(1830 + _y1 * (46.5 * _y1 - 405))
            return(_y2 / 86400)
        }
    }
    
    func radSin(x:Double) -> Double
    {
    return sin(inverseRadian*x);
    }
    func radCos(x:Double) -> Double
    {
    return cos(inverseRadian*x);
    }
    func radTan(x:Double) -> Double
    {
    return tan(inverseRadian*x);
    }

    func julianDayToIslamicDate(_jDays:Int)
    {
        let _hijriLeapYear=[0,0,1,0,0,1,0,1,0,0,1,0,0,1,0,0,1,0,1,0,0,1,0,0,1,0,1,0,0,1,0]
        let _jDays = 2457443
        let _cyc = Int(floor( ( Double(_jDays) - 1948086 ) / 10631 ))
        var _iDate = _jDays - 1948086 - _cyc * 10631 + 1
        var _iYear = 30 * _cyc
        var _iy = 0
        var _daysOfHijriYear = 354
        while(_iDate > _daysOfHijriYear)
        {
            _iDate -= _daysOfHijriYear
            _iYear++
            _iy++
            _daysOfHijriYear = 354+_hijriLeapYear[_iy]
        }
        var _iMonth=1;
        var monday=30;
        while(_iDate > monday)
        {
            _iDate-=monday;
            _iMonth++;
            if _iMonth%2==1
            {
                monday=30
            }else if _iMonth==12 && _hijriLeapYear[_iy]==1
            {
                monday=30
            }else
            {
                monday=29
            }
        }
    }

}
